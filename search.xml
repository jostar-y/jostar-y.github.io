<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Erlang 知识点索引</title>
    <url>/2021/04/30/Erlang%E7%9F%A5%E8%AF%86%E7%82%B9%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p><a href="https://hitdavid.github.io/theBeamBook/">Erlang 运行时系统</a></p>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p><a href="https://blog.csdn.net/zuimrs/article/details/103251636">Erlang 常用数据结构实现</a></p>
<p><a href="http://erlang.org/doc/efficiency_guide/advanced.html">Efficiency Guide - Adcanced</a></p>
<span id="more"></span>

<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p><a href="http://www.erlang.se/doc/programming_rules.shtml#HDR42">规范</a></p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2>]]></content>
      <tags>
        <tag>erlang</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 Erlang</title>
    <url>/2021/04/22/%E5%AE%89%E8%A3%85Erlang/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p><a href="http://erlang.org/download/">下载链接</a></p>
<p>分为 win32 和 win64 两类，选择合适的版本下载安装即可。</p>
<h2 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h2><span id="more"></span>

<ul>
<li>安装 perl</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">yum -y install perl-devel.x86_64</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>安装依赖模块</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>下载 erlang 源码压缩包</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">wget http://erlang.org/download/otp_src_23.3.tar.gz </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>解压 otp_src_23.3.tar.gz </p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tar -vxf otp_src_23.3.tar.gz </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>设置安装路径并安装</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir /root/erlang_23_3</span><br><span class="line">cd otp_src_23.3</span><br><span class="line">./configure --prefix=/root/erlang_23_3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="Debian-10"><a href="#Debian-10" class="headerlink" title="Debian 10"></a>Debian 10</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb</span><br><span class="line">sudo dpkg -i erlang-solutions_2.0_all.deb</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install g++ gcc make libncurses5-dev  libssl-dev</span><br><span class="line">sudo apt install erlang=1:23.3.1-1</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Ubuntu-20-04-LTS"><a href="#Ubuntu-20-04-LTS" class="headerlink" title="Ubuntu 20.04 LTS"></a>Ubuntu 20.04 LTS</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">wget -O- https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc | sudo apt-key add -</span><br><span class="line">echo "deb https://packages.erlang-solutions.com/ubuntu focal contrib" | sudo tee /etc/apt/sources.list.d/erlang-solution.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install g++ gcc make libncurses5-dev  libssl-dev</span><br><span class="line">sudo apt install erlang=1:23.3.1-1</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">brew install erlang</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <tags>
        <tag>erlang</tag>
      </tags>
  </entry>
  <entry>
    <title>Rebar3</title>
    <url>/2021/04/15/Rebar3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>Rebar3</code> 是 <code>Erlang</code> 的标准构建工具。遵循 <code>otp</code> 规范，可使用 <code>hex</code> 源进行依赖管理，支持发布多个包。</p>
<h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/erlang/rebar3.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> rebar3</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bootstrap</span></span><br></pre></td></tr></tbody></table></figure>

<span id="more"></span>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%% -*- erlang -*-</span></span><br><span class="line">{minimum_otp_vsn, <span class="string">"23.0"</span>}.</span><br><span class="line"></span><br><span class="line">{erl_opts, [</span><br><span class="line">    ...</span><br><span class="line">    {parse_transform, lager_transform},</span><br><span class="line">    {i, <span class="string">"include"</span>},</span><br><span class="line">    {src_dirs, [<span class="string">"src"</span>]},</span><br><span class="line">    {platform_define, <span class="string">"^[0-9]+"</span>, namespaced_types},</span><br><span class="line">    nowarn_unused_vars,</span><br><span class="line">    nowarn_deprecated_function,</span><br><span class="line">    nowarn_export_all,</span><br><span class="line">    {no_debug_info},</span><br><span class="line">    {hipe, native},</span><br><span class="line">    {hipe, [o3]},</span><br><span class="line">    {d, dbg_tester},</span><br><span class="line">    ...</span><br><span class="line">]}.</span><br><span class="line"></span><br><span class="line">{deps, [</span><br><span class="line">       <span class="comment">%% 包依赖</span></span><br><span class="line">      rebar,</span><br><span class="line">      {rebar,<span class="string">"1.0.0"</span>},</span><br><span class="line">      {rebar, {pkg, rebar_fork}}, <span class="comment">% rebar app under a different pkg name</span></span><br><span class="line">      {rebar, <span class="string">"1.0.0"</span>, {pkg, rebar_fork}},</span><br><span class="line">      <span class="comment">%% 源码依赖</span></span><br><span class="line">      {rebar, {git, <span class="string">"git://github.com/erlang/rebar3.git"</span>}},</span><br><span class="line">      {rebar, {git, <span class="string">"http://github.com/erlang/rebar3.git"</span>}},</span><br><span class="line">      {rebar, {git, <span class="string">"https://github.com/erlang/rebar3.git"</span>}},</span><br><span class="line">      {rebar, {git, <span class="string">"git@github.com:erlang/rebar3.git"</span>}},</span><br><span class="line">      {rebar, {hg, <span class="string">"https://othersite.com/erlang/rebar3"</span>}},</span><br><span class="line">      {rebar, {git, <span class="string">"git://github.com/erlang/rebar3.git"</span>, {ref, <span class="string">"aef728"</span>}}},</span><br><span class="line">      {rebar, {git, <span class="string">"git://github.com/erlang/rebar3.git"</span>, {branch, <span class="string">"master"</span>}}},</span><br><span class="line">      {rebar, {git, <span class="string">"git://github.com/erlang/rebar3.git"</span>, {tag, <span class="string">"3.0.0"</span>}}}</span><br><span class="line">]}.</span><br><span class="line"></span><br><span class="line">{rebar_packages_cdn, <span class="string">"https://hexpm.upyun.com"</span>}. <span class="comment">%% hex源</span></span><br><span class="line"></span><br><span class="line">{relx, [{release, {server, <span class="string">"0.1.0"</span>},</span><br><span class="line">    [</span><br><span class="line">     	...</span><br><span class="line">        sasl,</span><br><span class="line">        observer, wx, runtime_tools, <span class="comment">%% observer need</span></span><br><span class="line">        lager,</span><br><span class="line">        cowboy,</span><br><span class="line">        uuid,</span><br><span class="line">        emysql,</span><br><span class="line">        ...</span><br><span class="line">    ]},</span><br><span class="line"></span><br><span class="line">    {mode, dev},</span><br><span class="line">    {include_erts, true},</span><br><span class="line">    {include_src, false}</span><br><span class="line">    <span class="comment">%% automatically picked up if the files</span></span><br><span class="line">    <span class="comment">%% exist but can be set manually, which</span></span><br><span class="line">    <span class="comment">%% is required if the names aren't exactly</span></span><br><span class="line">    <span class="comment">%% sys.config and vm.args</span></span><br><span class="line">    {sys_config, <span class="string">"./config/sys.config"</span>},</span><br><span class="line">    {vm_args, <span class="string">"./config/vm.args"</span>}</span><br><span class="line"></span><br><span class="line">    <span class="comment">%% the .src form of the configuration files do</span></span><br><span class="line">    <span class="comment">%% not require setting RELX_REPLACE_OS_VARS</span></span><br><span class="line">    <span class="comment">%% {sys_config_src, "./config/sys.config.src"},</span></span><br><span class="line">    <span class="comment">%% {vm_args_src, "./config/vm.args.src"}</span></span><br><span class="line">]}.</span><br><span class="line"></span><br><span class="line">{profiles, [{prod, [{relx,</span><br><span class="line">    [<span class="comment">%% prod is the default mode when prod</span></span><br><span class="line">        <span class="comment">%% profile is used, so does not have</span></span><br><span class="line">        <span class="comment">%% to be explicitly included like this</span></span><br><span class="line">        {mode, prod}</span><br><span class="line">        {dev_mode, false},</span><br><span class="line">		{include_erts, true}</span><br><span class="line">        <span class="comment">%% use minimal mode to exclude ERTS</span></span><br><span class="line">        <span class="comment">%% {mode, minimal}</span></span><br><span class="line">    ]</span><br><span class="line">}]}]}.</span><br></pre></td></tr></tbody></table></figure>



<h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>rebar3 推荐两种主流方式管理项目：单个 app 结构的管理或者伞状管理。</p>
<p>单个 app 方式是根目录中只有一个 app，源代码存放在 src 目录，这种格式主要用来做库，处于共享的目的，例如 recon，虽然一般把这种目录方式认为成一个库项目，但是这种结构还是可以发布。</p>
<p>伞状项目的特点是包含了多个独立的 OTP app，通常位于 apps/ 或者 lib / 目录中，这些 app 都可以有自己的 rebar.config 这种格式一般用于项目开发，项目可以拥有一个或多个主 app，不一定只能有一个。</p>
<p>rebar3 提供了命令用来新建任意类型的模板，可通过 <code>rebar3 new &lt;template&gt; &lt;project-name&gt;</code> 命令调用。该 <code>&lt;template&gt;</code> 值可以是下面的任意值：</p>
<ul>
<li>app: 具有监督树和 state 维护的一个 OTP application，作为一个单独的 app</li>
<li>lib: 没有监督树的 OTP application，一般用来将多个模块组合起来作为一个单独的项目</li>
<li> release: 准备发布的伞状项目，比 app 项目多了 config 目录下的 sys.config，和 vm.args，用来描述运行环境</li>
<li> escript: 一种基于 app 的项目，将来可以构建成 escript 脚本</li>
<li> plugin: 用于支持 rebar3 脚本</li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table>
<thead>
<tr>
<th align="center">Command</th>
<th align="center"><strong>Description</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">compile</td>
<td align="center"> 编译项目</td>
</tr>
<tr>
<td align="center"> clean -a</td>
<td align="center"> 清除 <code>ebin</code></td>
</tr>
<tr>
<td align="center">deps</td>
<td align="center"> 列出依赖项</td>
</tr>
<tr>
<td align="center"> edoc</td>
<td align="center"> 生产 doc 文档</td>
</tr>
<tr>
<td align="center"> new</td>
<td align="center"> 创建</td>
</tr>
<tr>
<td align="center"> release</td>
<td align="center"> 发布</td>
</tr>
<tr>
<td align="center"> tar</td>
<td align="center"> 压缩包</td>
</tr>
<tr>
<td align="center"> tree</td>
<td align="center"> 查看依赖关系</td>
</tr>
<tr>
<td align="center"> update</td>
<td align="center"> 更新包索引</td>
</tr>
<tr>
<td align="center"> upgrade</td>
<td align="center"> 升级依赖</td>
</tr>
<tr>
<td align="center"> version</td>
<td align="center"> 打印版本</td>
</tr>
</tbody></table>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── apps</span><br><span class="line">│&nbsp;&nbsp; └── main</span><br><span class="line">│&nbsp;&nbsp;     ├── include</span><br><span class="line">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── main.hrl</span><br><span class="line">│&nbsp;&nbsp;     └── src</span><br><span class="line">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── main.app.src</span><br><span class="line">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── main_app.erl</span><br><span class="line">│&nbsp;&nbsp;         └── main_sup.erl</span><br><span class="line">├── _build</span><br><span class="line">│&nbsp;&nbsp; └── default</span><br><span class="line">│&nbsp;&nbsp;     ├── lib</span><br><span class="line">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── acceptor_pool</span><br><span class="line">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── chatterbox</span><br><span class="line">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── cowboy</span><br><span class="line">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── cowlib</span><br><span class="line">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── lager</span><br><span class="line">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── main</span><br><span class="line">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── quickrand</span><br><span class="line">│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── ranch</span><br><span class="line">│&nbsp;&nbsp;     │&nbsp;&nbsp; └── uuid</span><br><span class="line">│&nbsp;&nbsp;     └── rel</span><br><span class="line">│&nbsp;&nbsp;         └── server</span><br><span class="line">├── config</span><br><span class="line">│&nbsp;&nbsp; ├── sys.config</span><br><span class="line">│&nbsp;&nbsp; └── vm.args</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── rebar.config</span><br><span class="line">└── rebar.lock</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <tags>
        <tag>erlang</tag>
        <tag>rebar</tag>
      </tags>
  </entry>
  <entry>
    <title>Lager</title>
    <url>/2021/04/15/Lager/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Lager 是 erlang 的一个日志库。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li><p>细粒度日志级别（<code>debug, info, notice, warning, error, critical, alert, emergency</code>）</p>
</li>
<li><p>记录器使用 <code>parse transform</code> 进行转换，以允许捕获 <code>Module/Function/Line/Pid</code> 信息</p>
</li>
<li><p>当没有处理程序正在使用日志级别时 (例如 <code>debug</code>)，<code>debug</code> 日志不会被发送到日志处理器</p>
</li>
<li><p>支持多个后端，包括控制台和文件</p>
</li>
<li><p>支持多个 sink 扩展</p>
  <span id="more"></span></li>
<li><p>将常见的 OTP 错误消息改写为更易读的消息</p>
</li>
<li><p>支持在编译时处理记录，并可完整输出</p>
</li>
<li><p>在面对较大或较多的日志消息时，不会出现节点内存不足的情况</p>
</li>
<li><p>绕过日志大小截断的可选特性 (“不安全”)</p>
</li>
<li><p>支持内部时间和日期旋转，以及外部旋转工具</p>
</li>
<li><p><code>syslog</code> 类型的日志标签</p>
</li>
<li><p>彩色的终端输出</p>
</li>
<li><p>支持 <code>map</code></p>
</li>
<li><p>可选的负载削减设置高水位线，杀死 (并重新启动) 一个 sink 后，可配置冷却定时器</p>
</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h4 id="rebar-config"><a href="#rebar-config" class="headerlink" title="rebar.config"></a>rebar.config</h4><figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{erl_opts,[</span><br><span class="line">    ...</span><br><span class="line">    {parse_transform, lager_transform},     </span><br><span class="line">    {lager_truncation_size, <span class="number">1024</span>},          <span class="comment">% 限制单条日志最大尺寸</span></span><br><span class="line">    {lager_extra_sinks, [audit]},           <span class="comment">% 扩展日志</span></span><br><span class="line">    ...</span><br><span class="line">]}.</span><br><span class="line"></span><br><span class="line">{deps,[</span><br><span class="line">       {lager, <span class="string">"3.9.1"</span>}</span><br><span class="line">      ]}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="sys-config"><a href="#sys-config" class="headerlink" title="sys.config"></a>sys.config</h4><figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    {lager_test, []},</span><br><span class="line">    {lager, [</span><br><span class="line"></span><br><span class="line">        {log_root, <span class="string">"./log"</span>},                <span class="comment">% 日志根目录</span></span><br><span class="line">             </span><br><span class="line">        <span class="comment">% {colored, true}					% 控制台使用彩色输出</span></span><br><span class="line">                </span><br><span class="line">        {crash_log, <span class="string">"crash.log"</span>},           <span class="comment">% 设置后当系统发生严重崩溃时，会将日志记录在此文件中</span></span><br><span class="line">        {crash_log_msg_size, <span class="number">65536</span>},        <span class="comment">% 崩溃日志的消息大小的限制</span></span><br><span class="line">        {crash_log_size, <span class="number">10485760</span>},         <span class="comment">% 崩溃日志的文件大小限制</span></span><br><span class="line">        {crash_log_data, <span class="string">"$D0"</span>},            <span class="comment">% 崩溃日志的切割时间</span></span><br><span class="line">        {crash_log_count, <span class="number">5</span>},               <span class="comment">% 崩溃日志的切割数量</span></span><br><span class="line"></span><br><span class="line">        {reverse_pretty_stacktrace, true},      <span class="comment">% 翻转堆栈输出顺序</span></span><br><span class="line">        {error_logger_redirect, true},          <span class="comment">% 是否重定向error_logger消息</span></span><br><span class="line">        {error_logger_hwm, <span class="number">50</span>},                 <span class="comment">% error_logger消息的高水位线，超过将被丢弃 如果想要缓存一定数量消息，则开启下面的属性，默认：0</span></span><br><span class="line">        <span class="comment">% {error_logger_flush_queue, true},     % 开启丢弃消息 默认：true</span></span><br><span class="line">        <span class="comment">% {error_logger_flush_threshold, 1000}, % 当消息超过高水位线时，并且超过此上线时，超过的消息将被丢弃，默认：0</span></span><br><span class="line"></span><br><span class="line">        {async_threshold, <span class="number">20</span>},              <span class="comment">% 当日志消息积累到一定数量时切换到同步模式（反压）设置为undefined禁用，可以单独在sink中定义</span></span><br><span class="line">        {async_threshold_window, <span class="number">5</span>},        <span class="comment">% 档日志消息减少到一定数量时切换到异步模式，比如这里就是20 - 5 = 15 当消息少于15时切回异步，</span></span><br><span class="line">             								<span class="comment">% 可以单独在sink中定义</span></span><br><span class="line"></span><br><span class="line">        {handlers, [</span><br><span class="line">            <span class="comment">%% lager_console_backend 可设置参数</span></span><br><span class="line">            <span class="comment">%% level 日志级别（需要定义）</span></span><br><span class="line">            <span class="comment">%% formatter 格式化模块，默认：lager_default_formatter</span></span><br><span class="line">            <span class="comment">%% formatter_config 日志格式，默认：[time, " ", color, "[", severity,"] ", message]</span></span><br><span class="line">            <span class="comment">%% user_stderr 是否使用stderr，默认：false</span></span><br><span class="line">            <span class="comment">%% group_leader 指定要输出的io_server，默认：false，使用user进程作为io_server</span></span><br><span class="line">            {lager_console_backend, [</span><br><span class="line">                {level, debug},</span><br><span class="line">                {formatter_config, [time, <span class="string">" "</span>, <span class="string">"["</span>, serverity, <span class="string">"]"</span>, module, <span class="string">":"</span>, function, <span class="string">" "</span>, message, <span class="string">"\n"</span>]}</span><br><span class="line">            ]},</span><br><span class="line"></span><br><span class="line">            <span class="comment">%% lager_file_backend 可设置参数</span></span><br><span class="line">            <span class="comment">%% file 日志文件名（需要定义）</span></span><br><span class="line">            <span class="comment">%% level 日志级别 默认：&gt;=info</span></span><br><span class="line">            <span class="comment">%% size 日志文件大小 默认：10MB</span></span><br><span class="line">            <span class="comment">%% date 日志切割时间 默认：$D0 每日0点</span></span><br><span class="line">            <span class="comment">%% count 日志切分数量 默认：5</span></span><br><span class="line">            <span class="comment">%% rotation 日志切割处理模块 默认：lager_rotator_default</span></span><br><span class="line">            <span class="comment">%% formatter 格式化模块 默认：lager_default_formatter</span></span><br><span class="line">            <span class="comment">%% formatter_config 日志格式（需要定义）</span></span><br><span class="line">            <span class="comment">%% sync_on 立即同步日志级别 默认：error</span></span><br><span class="line">            <span class="comment">%% sync_interval 日志写文件间隔 默认：1000毫秒</span></span><br><span class="line">            <span class="comment">%% sync_size 日志写文件大小 默认：64KB</span></span><br><span class="line">            {lager_file_backend, [</span><br><span class="line">                {file, <span class="string">"error.log"</span>},</span><br><span class="line">                {level, '&gt;=error'},</span><br><span class="line">                {formatter_config, [time, <span class="string">" "</span>, <span class="string">"["</span>, serverity, <span class="string">"]"</span>, module, <span class="string">":"</span>, function, <span class="string">" "</span>, message, <span class="string">"\n"</span>]}</span><br><span class="line">            ]},</span><br><span class="line">            {lager_file_backend, [</span><br><span class="line">                {file, <span class="string">"info.log"</span>},</span><br><span class="line">                {level, '&lt;=warning'},</span><br><span class="line">                {formatter_config, [time, <span class="string">" "</span>, <span class="string">"["</span>, serverity, <span class="string">"]"</span>, module, <span class="string">":"</span>, function, <span class="string">" "</span>, message, <span class="string">"\n"</span>]}</span><br><span class="line">            ]}</span><br><span class="line">        ]},</span><br><span class="line"></span><br><span class="line">        <span class="comment">% {killer_hwm, 1000},               % 防洪，如果消息高水位线超过此值，则删掉相关接收器进程，默认：undefined</span></span><br><span class="line">        <span class="comment">% {killer_reinstall_after, 5000}    % 达到此时间后重启此接收器进程，默认：5000毫秒</span></span><br><span class="line">        {extra_sinks, [</span><br><span class="line">            {audit_lager_event, [</span><br><span class="line">                {handlers, [</span><br><span class="line">                    {lager_file_backend, [</span><br><span class="line">                        {file, <span class="string">"audit.log"</span>},</span><br><span class="line">                        {level, '=info'},</span><br><span class="line">                        {formatter_config, [time, <span class="string">" "</span>, <span class="string">"["</span>, serverity, <span class="string">"]"</span>, module, <span class="string">":"</span>, function, <span class="string">" "</span>, message, <span class="string">"\n"</span>]}</span><br><span class="line">                    ]}，</span><br><span class="line">                <span class="comment">% {flush_queue, true}                 % 功能与 error_logger_flush_queue 一样，可以单独在sink中定义，默认：true</span></span><br><span class="line">                <span class="comment">% {flush_threshold, 1000}             % 功能与 error_logger_flush_threshold 一样，可以单独在sink中定义，默认：0</span></span><br><span class="line">                               </span><br><span class="line">                {async_threshold, <span class="number">500</span>},			<span class="comment">% 流控，消息队列堆积到500时，日志调用会从异步变为同步</span></span><br><span class="line">                {async_threshold_window, <span class="number">50</span>}]   <span class="comment">% 当消息队列长度小于450（500-50）时，会切换回异步调用</span></span><br><span class="line">                ]}</span><br><span class="line">            ]}</span><br><span class="line">        ]}</span><br><span class="line">    ]}</span><br><span class="line">].</span><br></pre></td></tr></tbody></table></figure>

<h2 id="日志扩展"><a href="#日志扩展" class="headerlink" title="日志扩展"></a>日志扩展</h2><p>Lager 现在支持日志扩展 <code>sink</code>，每个接收器名为 <code>lager_event</code>（由 <code>gen_event</code> 管理器实现），可以有不同的同步 / 异步消息阈值和不同的后端。</p>
<ul>
<li><p>扩展配置</p>
<p>实现日志扩展，你需要如下操作：</p>
<ol>
<li>设置 <code>rebar.config</code></li>
<li>在 <code>app.config</code> 中配置后端</li>
</ol>
</li>
<li><p>命名</p>
<p>扩展的接收器有两个名称：</p>
<p><em><strong>atom</strong></em>：用作发送消息的模块名，如 <code>audit</code></p>
<p><em><strong>atom_lager_event</strong></em>：用于后端配置，如 <code>audit_lager_event</code></p>
</li>
<li><p>rebar.config</p>
<p>在 <code>erl_opts</code> 中包含一个接收器名称列表：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{lager_extra_sinks, [audit]}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>app.config</p>
<p>扩展 <code>lager</code> 配置，新增配置项 <code>extra_sinks</code>，流控和防洪是可选项，后面章节会有介绍。</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">[{lager, [</span><br><span class="line">          {log_root, <span class="string">"/tmp"</span>},</span><br><span class="line"></span><br><span class="line">          <span class="comment">%% Default handlers for lager/lager_event</span></span><br><span class="line">          {handlers, [</span><br><span class="line">                      {lager_console_backend, [{level, info}]},</span><br><span class="line">                      {lager_file_backend, [{file, <span class="string">"error.log"</span>}, {level, error}]},</span><br><span class="line">                      {lager_file_backend, [{file, <span class="string">"console.log"</span>}, {level, info}]}</span><br><span class="line">                     ]},</span><br><span class="line">          </span><br><span class="line">          {killer_hwm, <span class="number">1000</span>},				<span class="comment">% 防洪</span></span><br><span class="line">		  {killer_reinstall_after, <span class="number">5000</span>},</span><br><span class="line">          <span class="comment">%% Any other sinks</span></span><br><span class="line">          {extra_sinks,</span><br><span class="line">           [</span><br><span class="line">            {audit_lager_event,</span><br><span class="line">             [{handlers,</span><br><span class="line">               [{lager_file_backend,</span><br><span class="line">                 [{file, <span class="string">"audit.log"</span>},</span><br><span class="line">                  {level, info}</span><br><span class="line">                 ]</span><br><span class="line">                }]</span><br><span class="line">              },</span><br><span class="line">              {async_threshold, <span class="number">500</span>},			<span class="comment">% 流控</span></span><br><span class="line">              {async_threshold_window, <span class="number">50</span>}]</span><br><span class="line">            }]</span><br><span class="line">          }</span><br><span class="line">         ]</span><br><span class="line"> }</span><br><span class="line">].</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<p>上述步骤完成后，就可像调用 <code>lager:info</code> 一样使用 <code>audit:info</code> ，他们的使用逻辑和方法完全一样，但是逻辑是完全分开的，不会因为被对方影响，这在做扩展日志的时候会非常有用，你可以将想要额外统计的、不太重要的数据使用扩展处理来做，即使扩展日志太多，也不会对原生日志部分有影响，而且将来进行日志下架也很简单，只需要去掉接受项，不需要对代码进行更改。上述例子的 <code>audit</code> 是完全自定义的原子，可以定义需要的字段，但是需要注意后续的 <code>lager_event</code> 命名一定是 <code>atom_lager_enent</code> 。</p>
<ul>
<li><p>使用自定义 <code>sink</code></p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">-define</span><span class="params">(AUDIT(Args)</span>, audit:info<span class="params">(Args)</span>).</span><br><span class="line"><span class="keyword">-define</span><span class="params">(AUDIT(Format, Args)</span>, audit:info<span class="params">(Format, Args)</span>).</span><br><span class="line"><span class="keyword">-define</span><span class="params">(AUDIT(Attr, Format, Args)</span>, audit:info<span class="params">(Attr, Format, Args)</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">audit</span><span class="params">(Args)</span> -&gt;</span></span><br><span class="line">    ?AUDIT(Args).</span><br><span class="line"><span class="function"><span class="title">audit</span><span class="params">(Format, Args)</span> -&gt;</span></span><br><span class="line">    ?AUDIT(Format, Args).</span><br><span class="line"><span class="function"><span class="title">audit</span><span class="params">(Attr, Format, Args)</span> -&gt;</span></span><br><span class="line">    ?AUDIT(Attr, Format, Args).</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>扩展 <code>sink</code> 打印的日志不会显示到控制台上</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%% audit_lager_event 为自定义sink</span></span><br><span class="line"><span class="comment">%% 添加handler</span></span><br><span class="line"><span class="number">1</span>&gt; gen_event:add_handler(audit_lager_event, lager_console_backend, [{level, info}]).    </span><br><span class="line">ok</span><br><span class="line"><span class="comment">%% 删除handler</span></span><br><span class="line"><span class="number">2</span>&gt; gen_event:delete_handler(audit_lager_event, lager_console_backend, [{level, info}]).</span><br><span class="line">ok</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="日志格式化"><a href="#日志格式化" class="headerlink" title="日志格式化"></a>日志格式化</h2><p>所有记录器都有一个可以重写的默认格式，你只需要在格式化模块中导 <code>format(#lager_log_message{},Config#any())</code> 函数即可，之后加入到接收器的配置中，例如：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{lager, [</span><br><span class="line">  {handlers, [</span><br><span class="line">    {lager_console_backend, [{level, info}, {formatter, lager_default_formatter},</span><br><span class="line">      {formatter_config, [time,<span class="string">" ["</span>,severity,<span class="string">"] "</span>, message, <span class="string">"\n"</span>]}]},</span><br><span class="line">    {lager_file_backend, [{file, <span class="string">"error.log"</span>}, {level, error}, {formatter, lager_default_formatter},</span><br><span class="line">      {formatter_config, [date, <span class="string">" "</span>, time,<span class="string">" ["</span>,severity,<span class="string">"] "</span>,pid, <span class="string">" "</span>, message, <span class="string">"\n"</span>]}]},</span><br><span class="line">    {lager_file_backend, [{file, <span class="string">"console.log"</span>}, {level, info}]}</span><br><span class="line">  ]}</span><br><span class="line">]}.</span><br></pre></td></tr></tbody></table></figure>

<p>上述配置表示日志在生成后会调用 <code>lager_default_formatter:format(Message, [time," [",severity,"] ", message, “\n”]}])</code> 。</p>
<p>其中 <code>formatter_config</code> 中的原子项会被 <code>forma</code> 函数进行替换，支持的原子项如下:</p>
<ul>
<li><p><em><strong>date</strong></em>, <em><strong>time</strong></em>, <em><strong>message</strong></em>, <em><strong>sev</strong></em> 和 <em><strong>severity</strong></em> 是常驻项，其中<em><strong> sev</strong></em> 是代表日志等级的单词缩写，如 ‘debug’ -&gt; $D</p>
</li>
<li><p><em><strong>pid</strong></em>, <em><strong>file</strong></em>, <em><strong>line</strong></em>, <em><strong>module</strong></em>, <em><strong>function</strong></em> 和 <em><strong>node</strong></em> 在有 <code>parse_transform</code> 编译选项下也是常驻项</p>
</li>
<li><p><em><strong>application</strong></em> 在 <code>parse_transform</code> 编译选项下可能有值，这取决于源文件目录下是否有 <code>app.src</code> 文件</p>
</li>
<li><p>应用程序可以定义自己的元数据占位符，如 <code>{atom(), semi-iolist()}</code> 、 <code>{atom(), semi-iolist(), semi-iolist()}</code> 、 <code>{pterm, atom()}</code> 、 </p>
<p><code>{pterm, atom(), semi-iolist()}</code> ：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="string">"Foo"</span>] -&gt; <span class="string">"Foo"</span>, regardless <span class="keyword">of</span> message content.</span><br><span class="line">[message] -&gt; The content <span class="keyword">of</span> the logged message, alone.</span><br><span class="line">[{pid,<span class="string">"Unknown Pid"</span>}] -&gt; <span class="string">"&lt;?.?.?&gt;"</span> <span class="keyword">if</span> pid is in the metadata, <span class="string">"Unknown Pid"</span> <span class="keyword">if</span> <span class="keyword">not</span>.</span><br><span class="line">[{pid, [<span class="string">"My pid is "</span>, pid], [<span class="string">"Unknown Pid"</span>]}] -&gt; <span class="keyword">if</span> pid is in the metadata print <span class="string">"My pid is &lt;?.?.?&gt;"</span>, otherwise print <span class="string">"Unknown Pid"</span></span><br><span class="line">[{server,{pid, [<span class="string">"("</span>, pid, <span class="string">")"</span>], [<span class="string">"(Unknown Server)"</span>]}}] -&gt; user provided server metadata, otherwise <span class="string">"(&lt;?.?.?&gt;)"</span>, otherwise <span class="string">"(Unknown Server)"</span></span><br><span class="line">[{pterm, pterm_key, &lt;&lt;<span class="string">"undefined"</span>&gt;&gt;}] -&gt; <span class="keyword">if</span> a value for 'pterm_key' is found in OTP <span class="number">21</span> (or later) persistent_term storage it is used, otherwise <span class="string">"undefined"</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>默认情况下，Lager 使用本地时间来作为日志生成的时间，如果想使用 utc 时间来记录日志，那么在 <code>app.config</code> 中加入。</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%% format log timestamps as UTC</span></span><br><span class="line">[{sasl, [{utc_log, true}]}].</span><br></pre></td></tr></tbody></table></figure>



<h2 id="过载保护"><a href="#过载保护" class="headerlink" title="过载保护"></a>过载保护</h2><h4 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h4><p>在 Lager2.0 后，支持同步日志调用，之前只有异步日志调用，虽然异步调用会带来效率上的收益，但是无法防止消息队列过载，现在通过轮询消息邮箱大小，并根据邮箱大小在同步和异步之间切换消息传递模式。</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{ async_threshold，<span class="number">20</span> }，</span><br><span class="line">{ async_threshold_window，<span class="number">5</span> }</span><br></pre></td></tr></tbody></table></figure>


<p>这表示在消息队列堆积到 20 时，日志调用会从异步变为同步，当消息队列长度小于 15（20-15）时，会切换回异步调用。</p>
<p>这表示在消息队列堆积到 20 时，日志调用会从异步变为同步，当消息队列长度小于 15（20-15）时，会切换回异步调用</p>
<p>如果你担心日志会阻塞逻辑行为，可以通过配置关闭，只需设置 <code>async_threshold</code> 为 <code>undefined</code>。其默认值也是个较小的值，目的也是为了防止日志过流，因为 Lager 对日志都是尽快的处理，如果日志会堆积，说明系统还是有异常，应该着手于解决系统的异常，而不是让日志功能去兼容。</p>
<p>同样如果想限制 error_logger 的消息数，可以通过以下配置</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{error_logger_hwm，<span class="number">50</span> }</span><br></pre></td></tr></tbody></table></figure>


<p>最好确保这个数字较小。</p>
<h4 id="事件队列清理"><a href="#事件队列清理" class="headerlink" title="事件队列清理"></a>事件队列清理</h4><p>消息队列清理由 <code>high_water_mark</code> 和 <code>flush_queue</code> 控制，二者均达到后才会触发清理逻辑。</p>
<ul>
<li>high_water_mark ：高水位设定，水位指每秒收到的信息</li>
<li> flush_queue ： 队列清理</li>
</ul>
<p><code>error_logger</code> 高水位默认值是 0，也就是只要消息堆积就会触发清理逻辑，但是其他接收器在不配置高水位数值的时候，默认值是 undefined，也就是不会启用清理逻辑，如果需要使用需要在配置中加入</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{error_logger_hwm, <span class="number">50</span>}</span><br></pre></td></tr></tbody></table></figure>

<p>可以通过设定高水位让消息队列堆积到一定程度的时候丢弃消息，但是丢弃消息可能会影响日志上下文，高水位队列清理功能是默认开启的，可以通过以下方式对 <code>error_logger</code> 进行控制：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{error_logger_flush_queue, true | false}</span><br></pre></td></tr></tbody></table></figure>


<p>其他接收器，加入到指定 <code>sink</code> 的配置中</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{flush_queue, true | false}</span><br></pre></td></tr></tbody></table></figure>

<p>如果 <code>flush_queue</code> 为<em><strong> true</strong></em>，则可以设置消息队列长度阈值，在该阈值处消息将开始被丢弃。<code>error_logger</code> 默认值是 0，也就是只要消息堆积就会触发清理逻辑被丢弃。可以通过以下方式对 <code>error_logger</code> 的阈值进行控制：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{error_logger_flush_threshold, <span class="number">1000</span>}</span><br></pre></td></tr></tbody></table></figure>

<p>对于其他接受器，默认也是 0，可以通过单独的配置修改</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{flush_threshold, <span class="number">1000</span>}</span><br></pre></td></tr></tbody></table></figure>


<p>需要注意的是，丢弃消息永远是在触发了高水位设定的情况下才能触发，也就是水位如果高了，丢弃消息的逻辑并不会触发，水位如果低，但是丢弃消息的阈值设定的高，消息也不会丢失。</p>
<h4 id="接收器杀手"><a href="#接收器杀手" class="headerlink" title="接收器杀手"></a>接收器杀手</h4><p>对于自定义的接收器，有时候在消息堆积的时候，直接杀掉接收逻辑进程并重启，可以通过如下配置进行修改：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{killer_hwm, <span class="number">1000</span>},</span><br><span class="line">{killer_reinstall_after, <span class="number">5000</span>}</span><br></pre></td></tr></tbody></table></figure>

<p>这意味着，如果接收器的超过 1000 条消息堆积，将杀死整个接收器并在 5000 毫秒后重新加载它。</p>
<p>默认是不会设置自杀水位，也就是不会启用自杀功能，而重启的默认时间是 5000ms。</p>
<h2 id="日志等级设定"><a href="#日志等级设定" class="headerlink" title="日志等级设定"></a>日志等级设定</h2><p>从低到高分别为：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">debug &lt; info &lt; notice &lt; warning &lt; error &lt; critical &lt; alter &lt; emergency</span><br></pre></td></tr></tbody></table></figure>

<p>Lager 支持类似 <code>syslog</code> 形式定义级别，例如：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">info        % info及更高级别（&gt;=info 隐式）</span><br><span class="line">=debug      % 只有debug级别</span><br><span class="line">!=info      % 除了info级别以外的所有级别</span><br><span class="line">&lt;=notice    % notice及更低级别</span><br><span class="line">&lt;warning    % 任何小于warning的级别</span><br></pre></td></tr></tbody></table></figure>



<h2 id="运行时日志级别更改"><a href="#运行时日志级别更改" class="headerlink" title="运行时日志级别更改"></a>运行时日志级别更改</h2><ul>
<li><p>查看日志级别</p>
  <figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">lager:get_loglevel(lager_console_backend).</span><br><span class="line">lager:get_loglevel({lager_file_backend,<span class="string">"info.log"</span>}).</span><br><span class="line">lager:get_loglevel({lager_file_backend,<span class="string">"error.log"</span>}).</span><br><span class="line">lager:get_loglevel(sink_lager_event, {lager_file_backend,<span class="string">"sink.log"</span>}).</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>设置日志级别</p>
  <figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">lager:set_loglevel(lager_console_backend,'info'). </span><br><span class="line">lager:set_loglevel({lager_file_backend, <span class="string">"info.log"</span>},'debug').                          </span><br><span class="line">lager:set_loglevel(sink_lager_event, {lager_file_backend, <span class="string">"sink.log"</span>}, undefined, 'info').</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="日志文件轮转"><a href="#日志文件轮转" class="headerlink" title="日志文件轮转"></a>日志文件轮转</h2><p>Lager 自己可以完成日志文件的轮转，或者由外部进程负责，如果要使用，使用关键变量<em><strong> date</strong></em>、<em><strong>size</strong></em>、<em><strong>count</strong></em> 添加在 <code>backend</code> 的配置中即可，例如：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">[{file, <span class="string">"error.log"</span>}, {level, error}, {size, <span class="number">10485760</span>}, {date, <span class="string">"$D0"</span>}, {count, <span class="number">5</span>}]</span><br></pre></td></tr></tbody></table></figure>


<p>这告诉 Lager 将错误和以上消息记录到 <code>error.log</code> 文件，并在午夜或到达 10mb 时旋转文件（以先到者为准），并在当前文件之外再保留 5 个旋转的日志。将<em><strong> count</strong></em> 设置为 0 不会禁用旋转，而是旋转文件并且不保留以前的版本。要禁用旋转，将大小设置为 0，将日期设置为””。</p>
<p>这告诉 Lager 将错误和以上消息记录到 <code>error.log</code> 文件，并在午夜或到达 10mb 时旋转文件（以先到者为准），并在当前文件之外再保留 5 个旋转的日志。将<em><strong> count</strong></em> 设置为 0 不会禁用旋转，而是旋转文件并且不保留以前的版本。要禁用旋转，将大小设置为 0，将日期设置为””。</p>
<p>该 $D0 语法来自 <code>newsyslog.conf </code>中 <code>newsyslog </code>使用的语法，使用方法如下：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">Day, week and month time format: The lead-in character</span><br><span class="line">for day, week and month specification is a `$'-sign.</span><br><span class="line">The particular format of day, week and month</span><br><span class="line">specification is: [Dhh], [Ww[Dhh]] and [Mdd[Dhh]],</span><br><span class="line">respectively.  Optional time fields default to</span><br><span class="line">midnight.  The ranges for day and hour specifications</span><br><span class="line">are:</span><br><span class="line">  mm      minutes, range 0 ... 59</span><br><span class="line">  hh      hours, range 0 ... 23</span><br><span class="line">  w       day of week, range 0 ... 6, 0 = Sunday</span><br><span class="line">  dd      day of month, range 1 ... 31, or the</span><br><span class="line">          letter L or l to specify the last day of</span><br><span class="line">          the month.</span><br><span class="line"></span><br><span class="line">Some examples:</span><br><span class="line">  $H00    rotate every hour at HH:00</span><br><span class="line">  $D0     rotate every night at midnight</span><br><span class="line">  $D23    rotate every day at 23:00 hr</span><br><span class="line">  $D12H30 rotate every day at 12:30</span><br><span class="line">  $W0D23  rotate every week on Sunday at 23:00 hr</span><br><span class="line">  $W5D16  rotate every week on Friday at 16:00 hr</span><br><span class="line">  $W0D0H0 rotate every week on Sunday at 00:00</span><br><span class="line">  $M1D0   rotate on the first day of every month at</span><br><span class="line">          midnight (i.e., the start of the day)</span><br><span class="line">  $M5D6   rotate on every 5th day of the month at</span><br><span class="line">          6:00 hr</span><br></pre></td></tr></tbody></table></figure>



<h2 id="定制的日志轮转器"><a href="#定制的日志轮转器" class="headerlink" title="定制的日志轮转器"></a>定制的日志轮转器</h2><p>可以通过以下配置项定义 <code>lager_file_backend</code> 自定义日志循环器</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{rotator, lager_rotator_default}</span><br></pre></td></tr></tbody></table></figure>

<p>该模块应该是一个 <code>lager_rotator_behaviour</code>, 也就是应提供以下回调：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%% @doc Create a log file</span></span><br><span class="line">-callback<span class="params">(create_logfile(Name::list(), Buffer::{integer(), integer()} | any()) -&gt;</span></span><br><span class="line"><span class="params">    {ok, {FD::file:io_device(), Inode::integer(), Size::integer()}} | {error, any()})</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">%% @doc Open a log file</span></span><br><span class="line">-callback<span class="params">(open_logfile(Name::list(), Buffer::{integer(), integer()} | any()) -&gt;</span></span><br><span class="line"><span class="params">    {ok, {FD::file:io_device(), Inode::integer(), Size::integer()}} | {error, any()})</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">%% @doc Ensure reference to current target, could be rotated</span></span><br><span class="line">-callback<span class="params">(ensure_logfile(Name::list(), FD::file:io_device(), Inode::integer(),</span></span><br><span class="line"><span class="params">                         Buffer::{integer(), integer()} | any()) -&gt;</span></span><br><span class="line"><span class="params">    {ok, {FD::file:io_device(), Inode::integer(), Size::integer()}} | {error, any()})</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">%% @doc Rotate the log file</span></span><br><span class="line">-callback<span class="params">(rotate_logfile(Name::list(), Count::integer()) -&gt;</span></span><br><span class="line"><span class="params">    ok)</span>.</span><br></pre></td></tr></tbody></table></figure>



<h2 id="打印异常-exception"><a href="#打印异常-exception" class="headerlink" title="打印异常 - exception"></a>打印异常 - exception</h2><p>OTP 21+</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">    foo()</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">    Class:Reason:Stacktrace -&gt;</span><br><span class="line">        lager:error(</span><br><span class="line">            <span class="string">"~nStacktrace:~s"</span>,</span><br><span class="line">            [lager:pr_stacktrace(Stacktrace, {Class, Reason})])</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></tbody></table></figure>



<h2 id="打印记录-record"><a href="#打印记录-record" class="headerlink" title="打印记录 - record"></a>打印记录 - record</h2><figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span>&gt; lager:info(<span class="string">"My state is ~p"</span>, [lager:pr(State, ?MODULE)]).</span><br><span class="line">My state is #state{}</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>&gt; lager:info(<span class="string">"My state is ~p"</span>,[State]).</span><br><span class="line">My state is {state}</span><br></pre></td></tr></tbody></table></figure>



<h2 id="带色彩的控制台输出"><a href="#带色彩的控制台输出" class="headerlink" title="带色彩的控制台输出"></a>带色彩的控制台输出</h2><p>在 <code>app.config</code> 中 Lager 配置项中启用</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{colored, true}</span><br></pre></td></tr></tbody></table></figure>

<p>如果不喜欢默认的颜色，可以在 <code>lager.app.src</code> 中更改。</p>
<p>着色是从<em><strong> color</strong></em> 原子出现后的位置开始到消息结束，例如：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{lager_console_backend, [{level, info}, {formatter, lager_default_formatter},</span><br><span class="line">  {formatter_config, [time, color, <span class="string">" ["</span>,severity,<span class="string">"] "</span>, message, <span class="string">"\e[0m\r\n"</span>]}]]}</span><br></pre></td></tr></tbody></table></figure>

<p>上面的例子将染色消息中的所有字段，除了 <em><strong>time</strong></em> 。</p>
<p>需要注意的是 windows 是不支持命令行染色的，无论什么版本。</p>
<h2 id="在编译时设置截断限制"><a href="#在编译时设置截断限制" class="headerlink" title="在编译时设置截断限制"></a>在编译时设置截断限制</h2><p>Lager 默认将消息截断为 4096 字节，您可以使用该 <code>{lager_truncation_size, X}</code> 选项进行更改，可以加入到 <code>rebar</code> 中的 <code>erl_opts</code> 字段：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{erl_opts, [{parse_transform, lager_transform}, {lager_truncation_size, <span class="number">1024</span>}]}.</span><br></pre></td></tr></tbody></table></figure>



<h2 id="禁止applications-和-supervisors启动-停止日志"><a href="#禁止applications-和-supervisors启动-停止日志" class="headerlink" title="禁止applications 和 supervisors启动/停止日志"></a>禁止 applications 和 supervisors 启动 / 停止日志</h2><p>如果你不想看到应用的启动和关闭日志，可以通过以下配置进行关闭：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{lager, [{suppress_application_start_stop, true},</span><br><span class="line">         {suppress_supervisor_start_stop, true}]}</span><br></pre></td></tr></tbody></table></figure>



<h2 id="控制台输出到另一个Node"><a href="#控制台输出到另一个Node" class="headerlink" title="控制台输出到另一个Node"></a>控制台输出到另一个 Node</h2><p>如果你想把你的控制台输出发送到另一个 <code>group_leader</code> (通常是在另一个节点上)，你可以提供一个 <code>{group_leader, Pid}</code> 参数到控制台后端：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">GL = erlang:group_leader(),</span><br><span class="line">  Node = node(GL),</span><br><span class="line">  lager_app:start_handler(lager_event, {lager_console_backend, Node},</span><br><span class="line">       [{group_leader, GL}, {level, none}, {id, {lager_console_backend, Node}}]),</span><br><span class="line">  <span class="keyword">case</span> lager:trace({lager_console_backend, Node}, Filter, Level) <span class="keyword">of</span></span><br><span class="line">       ...</span><br></pre></td></tr></tbody></table></figure>

<p>在上面的例子中，假定代码是通过 <code>nodetool rpc</code> 调用运行的。代码在 Erlang 节点上执行，但 <code>group_leader</code> 在 <code>reltool</code> 节点上，例如 <code>appname_maint_12345@127.0.0.1</code>。如果您打算使用跟踪这个特性，请确保 <code>lager_app:start_handler</code> 的第二个参数和 <code>id</code> 参数匹配。当自定义 <code>group_leader</code> 进程退出时，Lager 将删除该处理程序的任何相关跟踪。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/erlang-lager/lager">Lager.git</a></p>
<p><a href="https://blog.csdn.net/eeeggghit/article/details/103349224?utm_medium=distribute.pc_relevant.none-task-blog-title-3&amp;spm=1001.2101.3001.4242">Lager 库使用介绍</a></p>
]]></content>
      <tags>
        <tag>erlang</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>那些话</title>
    <url>/2021/04/15/%E9%82%A3%E4%BA%9B%E8%AF%9D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>只做狠事，不说狠话。</p>
<p>口不密身死，身不密家破。</p>
<p>言不轻出，诺不轻许，行为慎始。</p>
<span id="more"></span>

<p>个人时间利用好，你才是生活。</p>
<p>凭什么挡在最前面？</p>
<p>勇气、忠诚、体魄、学识。</p>
]]></content>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title>那些歌</title>
    <url>/2021/04/15/%E9%82%A3%E4%BA%9B%E6%AD%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="x1f442-网易云"><a href="#x1f442-网易云" class="headerlink" title="👂网易云"></a><span class="github-emoji" alias="ear" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f442.png?v8">👂</span>网易云</h5>
    <div id="aplayer-zuCPvsRZ" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="6647556685" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div>

]]></content>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
</search>
