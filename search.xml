<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>lager</title>
    <url>/2021/04/15/lager/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>lager 是 erlang 和 exlir 的一个日志库。</p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul>
<li><p>细粒度日志级别（debug, info, notice, warning, error, critical, alert, emergency）</p>
</li>
<li><p>记录器使用 parse transform 进行转换，以允许捕获 Module/Function/Line/Pid 信息</p>
</li>
<li><p>当没有处理程序正在使用日志级别时 (例如 debug)，没有事件被发送到日志处理器</p>
</li>
<li><p>支持多个后端，包括控制台和文件</p>
</li>
<li><p>支持多个 sink 扩展</p>
  <span id="more"></span></li>
<li><p>将常见的 OTP 错误消息改写为更易读的消息</p>
</li>
<li><p>支持在编译时处理记录，并可完整输出</p>
</li>
<li><p>在面对较大或较多的日志消息时，不会出现节点内存不足的情况</p>
</li>
<li><p>绕过日志大小截断的可选特性 (“不安全”)</p>
</li>
<li><p>支持内部时间和日期旋转，以及外部旋转工具</p>
</li>
<li><p>syslog 类型的日志标签</p>
</li>
<li><p>彩色的终端输出</p>
</li>
<li><p>支持 map</p>
</li>
<li><p>可选的负载削减设置高水位线，杀死 (并重新启动) 一个 sink 后，可配置冷却定时器</p>
</li>
</ul>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>rebar.config</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{erl_opts,[</span><br><span class="line">    ...</span><br><span class="line">    {parse_transform, lager_transform},     </span><br><span class="line">    {lager_truncation_size, <span class="number">1024</span>},          <span class="comment">% 限制单条日志最大尺寸</span></span><br><span class="line">    {lager_extra_sinks, [msg]},             <span class="comment">% 扩展日志</span></span><br><span class="line">    ...</span><br><span class="line">]}.</span><br><span class="line"></span><br><span class="line">{deps,[</span><br><span class="line">       {lager, <span class="string">"3.9.1"</span>}</span><br><span class="line">      ]}</span><br></pre></td></tr></tbody></table></figure>

<p>sys.config</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    {lager_test, []},</span><br><span class="line">    {lager, [</span><br><span class="line"></span><br><span class="line">        {log_root, <span class="string">"./log"</span>},                <span class="comment">% 日志根目录</span></span><br><span class="line"></span><br><span class="line">        {crash_log, <span class="string">"crash.log"</span>},           <span class="comment">% 设置后当系统发生严重崩溃时，会将日志记录在此文件中</span></span><br><span class="line">        {crash_log_msg_size, <span class="number">65536</span>},        <span class="comment">% 崩溃日志的消息大小的限制</span></span><br><span class="line">        {crash_log_size, <span class="number">10485760</span>},         <span class="comment">% 崩溃日志的文件大小限制</span></span><br><span class="line">        {crash_log_data, <span class="string">"$D0"</span>},            <span class="comment">% 崩溃日志的切割时间</span></span><br><span class="line">        {crash_log_count, <span class="number">5</span>},               <span class="comment">% 崩溃日志的切割数量</span></span><br><span class="line"></span><br><span class="line">        {reverse_pretty_stacktrace, true},      <span class="comment">% 翻转堆栈输出顺序</span></span><br><span class="line">        {error_logger_redirect, true},          <span class="comment">% 是否重定向error_logger消息</span></span><br><span class="line">        {error_logger_hwm, <span class="number">50</span>},                 <span class="comment">% error_logger消息的高水位线，超过将被丢弃 如果想要缓存一定数量消息，则开启下面的属性</span></span><br><span class="line">        <span class="comment">% {error_logger_flush_queue, true},       % 开启丢弃消息 默认：true</span></span><br><span class="line">        <span class="comment">% {error_logger_flush_threshold, 1000},   % 当消息超过高水位线时，并且超过此上线时，超过的消息将被丢弃 默认：0</span></span><br><span class="line"></span><br><span class="line">        {async_threshold, <span class="number">20</span>},              <span class="comment">% 当日志消息积累到一定数量时切换到同步模式（反压）设置为undefined禁用    可以单独在sink中定义</span></span><br><span class="line">        {async_threshold_window, <span class="number">5</span>},        <span class="comment">% 档日志消息减少到一定数量时切换到异步模式  比如这里就是20 - 5 = 15 当消息少于15时切回异步  可以单独在sink中定义</span></span><br><span class="line">        <span class="comment">% {flush_queue, true}                 % 功能与 error_logger_flush_queue 一样 可以单独在sink中定义 默认：true</span></span><br><span class="line">        <span class="comment">% {flush_threshold, 1000}             % 功能与 error_logger_flush_threshold 一样 可以单独在sink中定义 默认：0</span></span><br><span class="line"></span><br><span class="line">        {handlers, [</span><br><span class="line">            <span class="comment">%% lager_console_backend 可设置参数</span></span><br><span class="line">            <span class="comment">%% level 日志级别（需要定义）</span></span><br><span class="line">            <span class="comment">%% formatter 格式化模块 默认：lager_default_formatter</span></span><br><span class="line">            <span class="comment">%% formatter_config 日志格式，默认：[time, " ", color, "[", severity,"] ", message]</span></span><br><span class="line">            <span class="comment">%% user_stderr 是否使用stderr 默认：false</span></span><br><span class="line">            <span class="comment">%% group_leader 指定要输出的io_server 默认：false 使用user进程作为io_server</span></span><br><span class="line">            {lager_console_backend, [</span><br><span class="line">                {level, debug},</span><br><span class="line">                {formatter_config, [time, <span class="string">" "</span>, <span class="string">"["</span>, serverity, <span class="string">"]"</span>, module, <span class="string">":"</span>, function, <span class="string">" "</span>, message, <span class="string">"\n"</span>]}</span><br><span class="line">            ]},</span><br><span class="line"></span><br><span class="line">            <span class="comment">%% lager_file_backend 可设置参数</span></span><br><span class="line">            <span class="comment">%% file 日志文件名（需要定义）</span></span><br><span class="line">            <span class="comment">%% level 日志级别 默认：&gt;=info</span></span><br><span class="line">            <span class="comment">%% size 日志文件大小 默认：10MB</span></span><br><span class="line">            <span class="comment">%% date 日志切割时间 默认：$D0 每日0点</span></span><br><span class="line">            <span class="comment">%% count 日志切分数量 默认：5</span></span><br><span class="line">            <span class="comment">%% rotation 日志切割处理模块 默认：lager_rotator_default</span></span><br><span class="line">            <span class="comment">%% formatter 格式化模块 默认：lager_default_formatter</span></span><br><span class="line">            <span class="comment">%% formatter_config 日志格式（需要定义）</span></span><br><span class="line">            <span class="comment">%% sync_on 立即同步日志级别 默认：error</span></span><br><span class="line">            <span class="comment">%% sync_interval 日志写文件间隔 默认：1000毫秒</span></span><br><span class="line">            <span class="comment">%% sync_size 日志写文件大小 默认：64KB</span></span><br><span class="line">            {lager_file_backend, [</span><br><span class="line">                {file, <span class="string">"error.log"</span>},</span><br><span class="line">                {level, '&gt;=error'},</span><br><span class="line">                {formatter_config, [time, <span class="string">" "</span>, <span class="string">"["</span>, serverity, <span class="string">"]"</span>, module, <span class="string">":"</span>, function, <span class="string">" "</span>, message, <span class="string">"\n"</span>]}</span><br><span class="line">            ]},</span><br><span class="line">            {lager_file_backend, [</span><br><span class="line">                {file, <span class="string">"info.log"</span>},</span><br><span class="line">                {level, '&lt;=warning'},</span><br><span class="line">                {formatter_config, [time, <span class="string">" "</span>, <span class="string">"["</span>, serverity, <span class="string">"]"</span>, module, <span class="string">":"</span>, function, <span class="string">" "</span>, message, <span class="string">"\n"</span>]}</span><br><span class="line">            ]}</span><br><span class="line">        ]},</span><br><span class="line"></span><br><span class="line">        <span class="comment">% {killer_hwm, 1000},               % 如果消息高水位线超过此值 则删掉相关接收器进程 默认：undefined</span></span><br><span class="line">        <span class="comment">% {killer_reinstall_after, 5000}    % 达到此时间后重启此接收器进程    默认：5000毫秒</span></span><br><span class="line">        {extra_sinks, [</span><br><span class="line">            {msg_lager_event, [</span><br><span class="line">                {handlers, [</span><br><span class="line">                    {lager_file_backend, [</span><br><span class="line">                        {file, <span class="string">"msg.log"</span>},</span><br><span class="line">                        {level, '=info'},</span><br><span class="line">                        {formatter_config, [time, <span class="string">" "</span>, <span class="string">"["</span>, serverity, <span class="string">"]"</span>, module, <span class="string">":"</span>, function, <span class="string">" "</span>, message, <span class="string">"\n"</span>]}</span><br><span class="line">                    ]}</span><br><span class="line">                ]}</span><br><span class="line">            ]}</span><br><span class="line">        ]}</span><br><span class="line">    ]}</span><br><span class="line">].</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p><a href="https://github.com/erlang-lager/lager#custom-formatting">自定义输出样式</a></p>
</li>
<li><p><a href="https://github.com/erlang-lager/lager#internal-log-rotation">日志切分策略</a></p>
</li>
<li><p><a href="https://github.com/erlang-lager/lager#colored-terminal-output">终端彩色输出</a></p>
</li>
<li><p><a href="https://hex.pm/packages?_utf8=%E2%9C%93&amp;search=lager&amp;sort=recent_downloads">其他 lager 后端</a></p>
</li>
</ul>
<h4 id="2、lager的日志等级划分"><a href="#2、lager的日志等级划分" class="headerlink" title="2、lager的日志等级划分"></a>2、lager 的日志等级划分</h4><p>从低到高分别为：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">debug &lt; info &lt; notice &lt; warning &lt; error &lt; critical &lt; alter &lt; emergency</span><br></pre></td></tr></tbody></table></figure>

<p>lager 支持类似 syslog 形式定义级别，例如：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">info        % info及更高级别（&gt;=info 隐式）</span><br><span class="line">=debug      % 只有debug级别</span><br><span class="line">!=info      % 除了info级别以外的所有级别</span><br><span class="line">&lt;=notice    % notice及更低级别</span><br><span class="line">&lt;warning    % 任何小于warning的级别</span><br></pre></td></tr></tbody></table></figure>



<h4 id="3、使用技巧"><a href="#3、使用技巧" class="headerlink" title="3、使用技巧"></a>3、使用技巧</h4><ul>
<li><p>使用自定义 sink</p>
  <figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">-define</span><span class="params">(MSG(Args)</span>, msg:info<span class="params">(Args)</span>).</span><br><span class="line"><span class="keyword">-define</span><span class="params">(MSG(Format, Args)</span>, msg:info<span class="params">(Format, Args)</span>).</span><br><span class="line"><span class="keyword">-define</span><span class="params">(MSG(Attr, Format, Args)</span>, msg:info<span class="params">(Attr, Format, Args)</span>).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">msg</span><span class="params">(Args)</span> -&gt;</span></span><br><span class="line">    ?MSG(Args).</span><br><span class="line"><span class="function"><span class="title">msg</span><span class="params">(Format, Args)</span> -&gt;</span></span><br><span class="line">    ?MSG(Format, Args).</span><br><span class="line"><span class="function"><span class="title">msg</span><span class="params">(Attr, Format, Args)</span> -&gt;</span></span><br><span class="line">    ?MSG(Attr, Format, Args).</span><br></pre></td></tr></tbody></table></figure>

</li>
<li><p>扩展 sink 打印的日志不会显示到 console</p>
  <figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%% sink_lager_event 为自定义sink</span></span><br><span class="line"><span class="comment">%% 添加handler</span></span><br><span class="line"><span class="number">1</span>&gt; gen_event:add_handler(sink_lager_event, lager_console_backend, [{level, info}]).    </span><br><span class="line">ok</span><br><span class="line"><span class="comment">%% 删除handler</span></span><br><span class="line"><span class="number">2</span>&gt; gen_event:delete_handler(sink_lager_event, lager_console_backend, [{level, info}]).</span><br><span class="line">ok</span><br></pre></td></tr></tbody></table></figure>

</li>
</ul>
<h2 id="日志扩展"><a href="#日志扩展" class="headerlink" title="日志扩展"></a>日志扩展</h2><h2 id="日志格式化"><a href="#日志格式化" class="headerlink" title="日志格式化"></a>日志格式化</h2><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><h2 id="error-logger-处理"><a href="#error-logger-处理" class="headerlink" title="error_logger 处理"></a>error_logger 处理</h2><h2 id="过载保护"><a href="#过载保护" class="headerlink" title="过载保护"></a>过载保护</h2><h3 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h3><h4 id="事件队列清理"><a href="#事件队列清理" class="headerlink" title="事件队列清理"></a>事件队列清理</h4><h4 id="接收器杀手"><a href="#接收器杀手" class="headerlink" title="接收器杀手"></a>接收器杀手</h4><h4 id="运行时日志级别更改"><a href="#运行时日志级别更改" class="headerlink" title="运行时日志级别更改"></a>运行时日志级别更改</h4><ul>
<li><p>查看日志级别</p>
  <figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">lager:get_loglevel(lager_console_backend).</span><br><span class="line">lager:get_loglevel({lager_file_backend,<span class="string">"info.log"</span>}).</span><br><span class="line">lager:get_loglevel({lager_file_backend,<span class="string">"error.log"</span>}).</span><br><span class="line">lager:get_loglevel(msg_lager_event, {lager_file_backend,<span class="string">"sink.log"</span>}).</span><br></pre></td></tr></tbody></table></figure>

</li>
<li><p>设置日志级别</p>
  <figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">lager:set_loglevel(lager_console_backend,'info'). </span><br><span class="line">lager:set_loglevel({lager_file_backend, <span class="string">"info.log"</span>},'debug').                          </span><br><span class="line">lager:set_loglevel(msg_lager_event, {lager_file_backend, <span class="string">"msg.log"</span>}, undefined, 'info').</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h4 id="日志等级设定"><a href="#日志等级设定" class="headerlink" title="日志等级设定"></a>日志等级设定</h4><h4 id="日志文件轮转"><a href="#日志文件轮转" class="headerlink" title="日志文件轮转"></a>日志文件轮转</h4><p>Lager 自己可以完成日志文件的轮转，或者由外部进程负责，如果要使用，使用关键变量 date、size、count 添加在 backend 的配置中即可，例如：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">[{file, <span class="string">"error.log"</span>}, {level, error}, {size, <span class="number">10485760</span>}, {date, <span class="string">"$D0"</span>}, {count, <span class="number">5</span>}]</span><br></pre></td></tr></tbody></table></figure>


<p>这告诉 Lager 将错误和以上消息记录到 error.log 文件，并在午夜或到达 10mb 时旋转文件（以先到者为准），并在当前文件之外再保留 5 个旋转的日志。将 count 设置为 0 不会禁用旋转，而是旋转文件并且不保留以前的版本。要禁用旋转，将大小设置为 0，将日期设置为””。</p>
<p>这告诉 Lager 将错误和以上消息记录到 error.log 文件，并在午夜或到达 10mb 时旋转文件（以先到者为准），并在当前文件之外再保留 5 个旋转的日志。将 count 设置为 0 不会禁用旋转，而是旋转文件并且不保留以前的版本。要禁用旋转，将大小设置为 0，将日期设置为””。</p>
<p>该 $D0 语法来自 newsyslog.conf 中 newsyslog 使用的语法，使用方法如下：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">Day, week and month time format: The lead-in character</span><br><span class="line">for day, week and month specification is a `$'-sign.</span><br><span class="line">The particular format of day, week and month</span><br><span class="line">specification is: [Dhh], [Ww[Dhh]] and [Mdd[Dhh]],</span><br><span class="line">respectively.  Optional time fields default to</span><br><span class="line">midnight.  The ranges for day and hour specifications</span><br><span class="line">are:</span><br><span class="line">  mm      minutes, range 0 ... 59</span><br><span class="line">  hh      hours, range 0 ... 23</span><br><span class="line">  w       day of week, range 0 ... 6, 0 = Sunday</span><br><span class="line">  dd      day of month, range 1 ... 31, or the</span><br><span class="line">          letter L or l to specify the last day of</span><br><span class="line">          the month.</span><br><span class="line"></span><br><span class="line">Some examples:</span><br><span class="line">  $H00    rotate every hour at HH:00</span><br><span class="line">  $D0     rotate every night at midnight</span><br><span class="line">  $D23    rotate every day at 23:00 hr</span><br><span class="line">  $D12H30 rotate every day at 12:30</span><br><span class="line">  $W0D23  rotate every week on Sunday at 23:00 hr</span><br><span class="line">  $W5D16  rotate every week on Friday at 16:00 hr</span><br><span class="line">  $W0D0H0 rotate every week on Sunday at 00:00</span><br><span class="line">  $M1D0   rotate on the first day of every month at</span><br><span class="line">          midnight (i.e., the start of the day)</span><br><span class="line">  $M5D6   rotate on every 5th day of the month at</span><br><span class="line">          6:00 hr</span><br></pre></td></tr></tbody></table></figure>



<h4 id="定制的日志轮转器"><a href="#定制的日志轮转器" class="headerlink" title="定制的日志轮转器"></a>定制的日志轮转器</h4><p>可以通过以下配置项定义 lager_file_backend 自定义日志循环器</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line">{rotator, lager_rotator_default}</span><br></pre></td></tr></tbody></table></figure>

<p>该模块应该是一个 lager_rotator_behaviour, 也就是应提供以下回调：</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%% @doc Create a log file</span></span><br><span class="line">-callback<span class="params">(create_logfile(Name::list(), Buffer::{integer(), integer()} | any()) -&gt;</span></span><br><span class="line"><span class="params">    {ok, {FD::file:io_device(), Inode::integer(), Size::integer()}} | {error, any()})</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">%% @doc Open a log file</span></span><br><span class="line">-callback<span class="params">(open_logfile(Name::list(), Buffer::{integer(), integer()} | any()) -&gt;</span></span><br><span class="line"><span class="params">    {ok, {FD::file:io_device(), Inode::integer(), Size::integer()}} | {error, any()})</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">%% @doc Ensure reference to current target, could be rotated</span></span><br><span class="line">-callback<span class="params">(ensure_logfile(Name::list(), FD::file:io_device(), Inode::integer(),</span></span><br><span class="line"><span class="params">                         Buffer::{integer(), integer()} | any()) -&gt;</span></span><br><span class="line"><span class="params">    {ok, {FD::file:io_device(), Inode::integer(), Size::integer()}} | {error, any()})</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">%% @doc Rotate the log file</span></span><br><span class="line">-callback<span class="params">(rotate_logfile(Name::list(), Count::integer()) -&gt;</span></span><br><span class="line"><span class="params">    ok)</span>.</span><br></pre></td></tr></tbody></table></figure>



<h4 id="打印异常-exception"><a href="#打印异常-exception" class="headerlink" title="打印异常 - exception"></a>打印异常 - exception</h4><p>OTP 21+</p>
<figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">    foo()</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">    Class:Reason:Stacktrace -&gt;</span><br><span class="line">        lager:error(</span><br><span class="line">            <span class="string">"~nStacktrace:~s"</span>,</span><br><span class="line">            [lager:pr_stacktrace(Stacktrace, {Class, Reason})])</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></tbody></table></figure>



<h4 id="打印记录-record"><a href="#打印记录-record" class="headerlink" title="打印记录 - record"></a>打印记录 - record</h4><figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span>&gt; lager:info(<span class="string">"My state is ~p"</span>, [lager:pr(State, ?MODULE)]).</span><br><span class="line">My state is #state{}</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>&gt; lager:info(<span class="string">"My state is ~p"</span>,[State]).</span><br><span class="line">My state is {state}</span><br></pre></td></tr></tbody></table></figure>



<h4 id="带色彩的控制台输出"><a href="#带色彩的控制台输出" class="headerlink" title="带色彩的控制台输出"></a>带色彩的控制台输出</h4><h4 id="在编译时设置截断限制"><a href="#在编译时设置截断限制" class="headerlink" title="在编译时设置截断限制"></a>在编译时设置截断限制</h4><h4 id="禁止applications-和-supervisors启动-停止日志"><a href="#禁止applications-和-supervisors启动-停止日志" class="headerlink" title="禁止applications 和 supervisors启动/停止日志"></a>禁止 applications 和 supervisors 启动 / 停止日志</h4><h4 id="控制台输出到另一个Node"><a href="#控制台输出到另一个Node" class="headerlink" title="控制台输出到另一个Node"></a>控制台输出到另一个 Node</h4>]]></content>
      <tags>
        <tag>erlang</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>rebar</title>
    <url>/2021/04/15/rebar/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>todo</title>
    <url>/2021/04/15/todo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Todo…</p>
<span id="more"></span>

<h4 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h4><p>gc</p>
<p>rika</p>
<p>hot_reload</p>
<p>cluster</p>
<p>node</p>
<p>io:user</p>
<p>binary</p>
<h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>主从</p>
<h4 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h4><p>tcp</p>
<p>udp</p>
<p>http</p>
<p>mqtt</p>
<p>coap</p>
]]></content>
  </entry>
  <entry>
    <title>安装 erlang</title>
    <url>/2021/04/22/%E5%AE%89%E8%A3%85erlang/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p><a href="http://erlang.org/download/">下载链接</a></p>
<p>分为 win32 和 win64 两类，选择合适的版本下载安装即可。</p>
<h4 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h4><span id="more"></span>

<ul>
<li>安装 perl</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">yum -y install perl-devel.x86_64</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>安装依赖模块</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>下载 erlang 源码压缩包</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">wget http://erlang.org/download/otp_src_23.3.tar.gz </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>解压 otp_src_23.3.tar.gz </p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tar -vxf otp_src_23.3.tar.gz </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>设置安装路径并安装</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir /root/erlang_23_3</span><br><span class="line">cd otp_src_23.3</span><br><span class="line">./configure --prefix=/root/erlang_23_3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h4 id="Debian-10"><a href="#Debian-10" class="headerlink" title="Debian 10"></a>Debian 10</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb</span><br><span class="line">sudo dpkg -i erlang-solutions_2.0_all.deb</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install erlang=1:23.3.1-1</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Ubuntu-20-04-LTS"><a href="#Ubuntu-20-04-LTS" class="headerlink" title="Ubuntu 20.04 LTS"></a>Ubuntu 20.04 LTS</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">wget -O- https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc | sudo apt-key add -</span><br><span class="line">echo "deb https://packages.erlang-solutions.com/ubuntu focal contrib" | sudo tee /etc/apt/sources.list.d/erlang-solution.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install erlang=1:23.3.1-1</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">brew install erlang</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <tags>
        <tag>erlang</tag>
      </tags>
  </entry>
  <entry>
    <title>那些歌</title>
    <url>/2021/04/15/%E9%82%A3%E4%BA%9B%E6%AD%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="x1f442-网易云"><a href="#x1f442-网易云" class="headerlink" title="👂网易云"></a><span class="github-emoji" alias="ear" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f442.png?v8">👂</span>网易云</h5>
    <div id="aplayer-zuCPvsRZ" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="6647556685" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div>

]]></content>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title>那些话</title>
    <url>/2021/04/15/%E9%82%A3%E4%BA%9B%E8%AF%9D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>凭什么挡在最前面？</p>
<p>勇气、忠诚、体魄、学识</p>
]]></content>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
</search>
